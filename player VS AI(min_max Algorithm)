#tik tak tok(player VS AI(min_max Algorithm))

#Equip the board and player
import random
board = [[' ' for _ in range(3)] for _ in range(3)]
current_player = 'X'
available_positions = list(range(1, 10))




#Print the board
print("Board:")
for i in range(3):
    for j in range(3):
        print(board[i][j], end='')
        if j < 2:
            print(' | ', end='')
    print()
    if i < 2:
        print("-" * 9)
    else:
        print()
#The main part of the game
while True:
    #If the available positions are empty, it is a draw and the game ends
    if len(available_positions) == 0:
        print("It's a tie!")
        break

    print(f"Available positions: {available_positions}")
    #Take the player's move 
    if current_player == 'X':
        while True:
            try:
                position = int(input(f"Player {current_player}, choose an available position: "))
                if position not in available_positions:
                    print("This position is not available or invalid! Choose from available positions.")
                    continue
                break
            except ValueError:
                print("Invalid input! Please enter a number.")
                continue
    #Artificial intelligence movement            
    else:
        def minimax(board, depth, is_maximizing):
            for i in range(3):
                if board[i][0] == board[i][1] == board[i][2] == 'O':
                    return 1
                if board[i][0] == board[i][1] == board[i][2] == 'X':
                    return -1
            for i in range(3):
                if board[0][i] == board[1][i] == board[2][i] == 'O':
                    return 1
                if board[0][i] == board[1][i] == board[2][i] == 'X':
                    return -1
            if board[0][0] == board[1][1] == board[2][2] == 'O':
                return 1
            if board[0][0] == board[1][1] == board[2][2] == 'X':
                return -1
            if board[0][2] == board[1][1] == board[2][0] == 'O':
                return 1
            if board[0][2] == board[1][1] == board[2][0] == 'X':
                return -1
            if all(board[i//3][i%3] != ' ' for i in range(9)):
                return 0
            if is_maximizing:
                best_score = -float('inf')
                for i in range(9):
                    row, col = i // 3, i % 3
                    if board[row][col] == ' ':
                        board[row][col] = 'O'
                        score = minimax(board, depth + 1, False)
                        board[row][col] = ' '
                        best_score = max(score, best_score)
                return best_score
            else:
                best_score = float('inf')
                for i in range(9):
                    row, col = i // 3, i % 3
                    if board[row][col] == ' ':
                        board[row][col] = 'X'
                        score = minimax(board, depth + 1, True)
                        board[row][col] = ' '
                        best_score = min(score, best_score)
                return best_score

        best_score = -float('inf')
        for i in range(9):
            row, col = i // 3, i % 3
            if board[row][col] == ' ':
                board[row][col] = 'O'
                score = minimax(board, 0, False)
                board[row][col] = ' '
                if score > best_score:
                    best_score = score
                    best_move = i + 1
        position = best_move
        print(f"AI (Player {current_player}) chooses position {position}")
    #Update the board 
    available_positions.remove(position)

    row = (position - 1) // 3
    col = (position - 1) % 3
    board[row][col] = current_player

    print("Board:")
    for i in range(3):
        for j in range(3):
            print(board[i][j], end='')
            if j < 2:
                print(' | ', end='')
        print()
        if i < 2:
            print("-" * 9)
        else:
            print()
    #Verify the winner
    winner = False
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] == current_player:
            winner = True
        if board[0][i] == board[1][i] == board[2][i] == current_player:
            winner = True
    if board[0][0] == board[1][1] == board[2][2] == current_player:
        winner = True
    if board[0][2] == board[1][1] == board[2][0] == current_player:
        winner = True

    if winner:
        print(f"Player {current_player} wins!")
        break
    #Player role
    current_player = 'O' if current_player=='X'else'X'
